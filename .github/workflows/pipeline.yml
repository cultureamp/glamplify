name: pipeline
on: push

env:
  goLangVersion: '1.20.0'

jobs:
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install GO
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.goLangVersion }}
      - name: GOLangCI-Lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: 'latest'

  go-sec:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.goLangVersion }}

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: -fmt json -out gosec-results.json -conf gosec-config.json -stdout ./...
  
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: gosec-results
          path: gosec-results.json

  go-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install GO
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.goLangVersion }}
      - name: GOTest
        run: |
          go test ./...

  go-cover:
    needs: [go-test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install GO
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.goLangVersion }}
      - name: GOCover
        run: |
          go test ./... -covermode=count -coverprofile=count.out
          go tool cover -func=count.out

  go-build:
    needs: [go-cover,go-lint,go-sec]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install GO
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.goLangVersion }}
      - name: GOBuild
        run: |
          GOARCH=amd64 GOOS=linux go build -ldflags="-s -w" -o main

      - name: Create tag std
        if: false # disable for now
        uses: actions/github-script@v3
        with:
          github-token: ${{ github.token }}
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/tagname",
              sha: context.sha
            })

  tag-master:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create version tag for master
        uses: anothrNick/github-tag-action@1.67.0
        env: # https://github.com/anothrNick/github-tag-action
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: master
